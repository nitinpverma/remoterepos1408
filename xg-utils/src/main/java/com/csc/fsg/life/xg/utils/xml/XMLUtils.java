package com.csc.fsg.life.xg.utils.xml;

import java.io.*;
import java.util.*;

import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * @author ddas5
 * 
 *         To change this generated comment edit the template variable
 *         "typecomment": Window>Preferences>Java>Templates. To enable and
 *         disable the creation of type comments go to
 *         Window>Preferences>Java>Code Generation.
 */
public class XMLUtils {

	public static void setAttributeValue(Document doc, Node node,
			String attributeName, String value) {
		NamedNodeMap allatrributes = node.getAttributes();

		Node attribute = allatrributes.getNamedItem(attributeName);

		if (attribute != null) {
			// System.out.println("Printing Attribute " + attributeName + " " +
			// attribute.getNodeValue());

			attribute.setNodeValue(value);
		} else {
			Node newNode = doc.createAttribute(attributeName);

			node.appendChild(newNode);

			newNode.setNodeValue(value);
		}
	}

	public static String getAttributeValue(Node node, String attributeName) {
		NamedNodeMap allatrributes = node.getAttributes();

		Node attribute = allatrributes.getNamedItem(attributeName);

		if (attribute != null) {
			// System.out.println("Printing Attribute " + attributeName + " " +
			// attribute.getNodeValue());

			return attribute.getNodeValue();
		}
		return null;
	}

	public static void printChildren(Node node) {
		NodeList children = node.getChildNodes();

		int childsize = children.getLength();

		for (int i = 0; i < childsize; i++) {
			Node child = children.item(i);

			System.out.println("Printing Child " + child.getNodeName() + "  "
					+ child.getNodeValue());
		}
	}

	public static Node findNamedNodeWithAttribute(Node node, String nodeName,
			String attributeName, String serviceName) {
		if (node.getNodeName().equalsIgnoreCase(nodeName)) {
			String _serviceName = getAttributeValue(node, attributeName);
			if (_serviceName != null) {
				if (_serviceName.equalsIgnoreCase(serviceName)) {
					return node;
				}
				return null;
			}
		} else {
			NodeList children = node.getChildNodes();

			int childsize = children.getLength();

			for (int i = 0; i < childsize; i++) {
				Node child = children.item(i);

				Node servicenode = findNamedNodeWithAttribute(child, nodeName, attributeName, serviceName);

				if (servicenode != null)
					return servicenode;
			}
		}

		return null;
	}

	public static String findAtrributeInChildren(Node node, String nodeName,
			String attributeToMatch, String attributeName,
			String attributeToFind) {

		try {
			NodeList children = node.getChildNodes();

			int childsize = children.getLength();

			for (int i = 0; i < childsize; i++) {
				Node child = children.item(i);

				// System.out.println ( child.getNodeName() );

				if (child.getNodeName().equals(nodeName)) {
					String _attributeName = getAttributeValue(child, attributeToMatch);

					if (_attributeName != null) {
						if (_attributeName.equals(attributeName)) {
							return getAttributeValue(child, attributeToFind);
						}
					}
				}
			}
		} catch (Exception e) {
			if (node != null) {
				System.out.println("Node:[" + node.getNodeName() + "]: Value:["
						+ node.getNodeValue() + "]");
			}
			System.out.println("AttributeToMatch:" + attributeToMatch + "]");
			System.out.println("AttributeName:[" + attributeName + "]");
			System.out.println("AttributeToFind:[" + attributeToFind + "]");
		}

		return null;
	}

	public static Document buildDocument(String path) {

		Document document = null;

		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		// factory.setValidating(true);
		// factory.setNamespaceAware(true);
		try {
			DocumentBuilder builder = factory.newDocumentBuilder();
			document = builder.parse(new File(path));

		} catch (SAXParseException spe) {
			// Error generated by the parser
			System.out.println("\n** Parsing error" + ", line "
					+ spe.getLineNumber() + ", uri " + spe.getSystemId());
			System.out.println("   " + spe.getMessage());

			// Use the contained exception, if any
			Exception x = spe;
			if (spe.getException() != null)
				x = spe.getException();
			x.printStackTrace();

		} catch (SAXException sxe) {
			// Error generated during parsing)
			Exception x = sxe;
			if (sxe.getException() != null)
				x = sxe.getException();
			x.printStackTrace();

		} catch (ParserConfigurationException pce) {
			// Parser with specified options can't be built
			pce.printStackTrace();

		} catch (IOException ioe) {
			// I/O error
			ioe.printStackTrace();
		}

		return document;
	}

	public static void saveDocAsFile(Document doc, String fname) {
		try {
			TransformerFactory tfFac = TransformerFactory.newInstance();
			// use null trandformation
			Transformer tf = tfFac.newTransformer();
			tf.transform(new DOMSource(doc), new StreamResult(new FileWriter(
					fname)));
		} catch (IOException ioe) {
			ioe.printStackTrace();
		} catch (TransformerException e) {
			e.printStackTrace();
		}
	}

	public static List<String> findAtrributesInChildren(Node node,
			String nodeName, String attributeToMatch, String attributeName,
			String attributeToFind) {

		NodeList children = node.getChildNodes();
		int childsize = children.getLength();
		List<String> attributes = new ArrayList<String>();

		for (int i = 0; i < childsize; i++) {
			Node child = children.item(i);

			// System.out.println ( child.getNodeName() );

			if (child.getNodeName().equals(nodeName)) {
				String _attributeName = getAttributeValue(child, attributeToMatch);

				if (_attributeName != null) {
					if (_attributeName.equals(attributeName)) {
						attributes.add(getAttributeValue(child, attributeToFind));
					}
				}
			}
		}
		return attributes;
	}
}
